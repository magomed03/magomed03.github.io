<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>教程 | Academic</title>
    <link>https://example.com/ru/category/%E6%95%99%E7%A8%8B/</link>
      <atom:link href="https://example.com/ru/category/%E6%95%99%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    <description>教程</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>ru-ru</language><lastBuildDate>Fri, 06 May 2022 18:20:08 +0300</lastBuildDate>
    <image>
      <url>https://example.com/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>教程</title>
      <link>https://example.com/ru/category/%E6%95%99%E7%A8%8B/</link>
    </image>
    
    <item>
      <title>Git</title>
      <link>https://example.com/ru/post/git/</link>
      <pubDate>Fri, 06 May 2022 18:20:08 +0300</pubDate>
      <guid>https://example.com/ru/post/git/</guid>
      <description>&lt;h2 id=&#34;что-такое-git&#34;&gt;Что такое Git?&lt;/h2&gt;
&lt;p&gt;Git стал мировым стандартом для управления версиями. Так что же?&lt;/p&gt;
&lt;p&gt;Git — это распределенная система управления версиями. Это означает, что локальный клон проекта является полным репозиторием управления версиями. Полнофункциональные локальные репозитории упрощают работу в автономном режиме или в удаленном расположении. Разработчики фиксируют свою работу локально, а затем синхронизируют свою копию репозитория с копией на сервере. Эта парадигма отличается от централизованных систем управления версиями, где клиенты должны синхронизировать код с сервером перед созданием новой версии кода.&lt;/p&gt;
&lt;p&gt;Гибкость и популярность Git делают его отличным выбором для любой команды. Многие разработчики и колледжа вузов уже знакомы с использованием Git. Сообщество пользователей Git создало много ресурсов для обучения разработчикам и популярностью Git, что упрощает получение справки при необходимости. Почти каждая среда разработки имеет поддержку Git, а средства командной строки Git работают в каждой основной операционной системе.&lt;/p&gt;
&lt;h2 id=&#34;основы-git&#34;&gt;Основы Git&lt;/h2&gt;
&lt;p&gt;При каждом сохранении работы Git создает фиксацию. Фиксация — это моментальный снимок всех файлов в момент времени. Если файл не был изменен с одной фиксации на следующий, Git использует сохраненный ранее файл. Этот проект отличается от других систем, в которых хранится первоначальная версия файла, и при этом сохраняются записи о различиях.&lt;/p&gt;
&lt;p&gt;Фиксации создают ссылки на другие фиксации, формируя график истории разработки. Можно вернуть код к предыдущей фиксации, проверить, как изменились файлы с одной фиксации до следующей, и просмотреть сведения, например, где и когда были внесены изменения. Фиксации определяются в Git по уникальному криптографическиму хэшу содержимого фиксации. Так как все хэшировано, невозможно внести изменения, потерять информацию или повредить файлы, не обнаруживая их.&lt;/p&gt;
&lt;h2 id=&#34;ветви&#34;&gt;Ветви&lt;/h2&gt;
&lt;p&gt;Каждый разработчик сохраняет изменения в собственном репозитории локального кода. В результате может существовать множество различных изменений, основанных на одной фиксации. Git предоставляет средства для изоляции изменений и последующего их слияния. Ветви, являющиеся облегченными указателями на выполняемые задачи, управляют этим разделением. После завершения работы, созданной в ветви, эту ветвь можно снова объединить с основной ветвью команды (или магистралью).&lt;/p&gt;
&lt;h2 id=&#34;файлы-и-фиксации&#34;&gt;Файлы и фиксации&lt;/h2&gt;
&lt;p&gt;Файлы в Git находятся в одном из трех состояний: изменено, промежуточное или зафиксировано. При первом изменении файла изменения существуют только в рабочем каталоге. Они еще не являются частью фиксации или истории разработки. Разработчик должен разместить измененные файлы для включения в фиксацию. Промежуточная область содержит все изменения, которые включаются в следующую фиксацию. Когда разработчик довольны промежуточными файлами, они упаковываются как фиксация с сообщением с описанием изменений. Эта фиксация станет частью истории разработки.&lt;/p&gt;
&lt;p&gt;Промежуточное хранение позволяет разработчикам выбирать, какие изменения файлов следует сохранить в фиксации, чтобы разбить большие изменения на ряд небольших фиксаций. Уменьшая область фиксаций, проще Просмотреть журнал фиксаций, чтобы найти определенные изменения в файлах.&lt;/p&gt;
&lt;h2 id=&#34;преимущества-git&#34;&gt;Преимущества Git&lt;/h2&gt;
&lt;h3 id=&#34;одновременная-разработка&#34;&gt;Одновременная разработка&lt;/h3&gt;
&lt;p&gt;Каждый имеет собственную локальную копию кода и может работать одновременно с собственными ветвями. Git работает в автономном режиме, так как почти каждая операция является локальной.&lt;/p&gt;
&lt;h3 id=&#34;быстрые-выпуски&#34;&gt;Быстрые выпуски&lt;/h3&gt;
&lt;p&gt;Ветви обеспечивают гибкую и одновременную разработку. Главная ветвь содержит стабильный и высококачественный код, из которого выпускают. Ветви компонентов содержат выполняемые работы, которые объединяются в главную ветвь после завершения. Отделение ветви выпуска от разрабатываемой среды упрощает управление стабильным кодом и ускоряет доставку обновлений.&lt;/p&gt;
&lt;h3 id=&#34;встроенная-интеграция&#34;&gt;Встроенная интеграция&lt;/h3&gt;
&lt;p&gt;Из-за популярности Git интегрирован в большинство средств и продуктов. У каждой крупной интегрированной среды разработки есть встроенная поддержка Git, а многие инструменты поддерживают непрерывную интеграцию, непрерывное развертывание, автоматическое тестирование, отслеживание рабочих элементов, метрики и интеграцию функций создания отчетов с Git. Такая интеграция упрощает повседневный рабочий процесс.&lt;/p&gt;
&lt;h3 id=&#34;поддержка-надежных-сообществ&#34;&gt;Поддержка надежных сообществ&lt;/h3&gt;
&lt;p&gt;Git является открытым исходным кодом и стал стандартом де-факто для управления версиями, поэтому для рабочих групп не хватает средств и ресурсов. Объем поддержки сообщества для Git по сравнению с другими системами контроля версий упрощает получение справки при необходимости.&lt;/p&gt;
&lt;h3 id=&#34;git-работает-с-любой-командой&#34;&gt;Git работает с любой командой&lt;/h3&gt;
&lt;p&gt;Использование Git с инструментом управления исходным кодом позволяет повысить эффективность работы группы, применяя политики, автоматизирующие процессы и улучшая видимость и отслеживаемость работы. Команда может сопоставлять отдельные средства для управления версиями, отслеживания рабочих элементов, а также непрерывной интеграции и развертывания. кроме того, они могут выбрать такое решение, как GitHub или Azure DevOps , которые поддерживают все эти задачи в одном месте.&lt;/p&gt;
&lt;h3 id=&#34;запросы-на-вытягивание&#34;&gt;Запросы на вытягивание&lt;/h3&gt;
&lt;p&gt;Используйте запросы на вытягивание , чтобы обсудить изменения кода с командой перед их слиянием в главную ветвь. Обсуждения в запросах на вытягивание являются ценными для обеспечения качества кода и повышения знаний в группе. такие платформы, как GitHub и Azure DevOps, предлагают широкие возможности запросов на включение внесенных изменений, когда разработчики могут просматривать изменения в файлах, оставлять комментарии, проверять фиксации, просматривать сборки и голосовать для утверждения кода.&lt;/p&gt;
&lt;h3 id=&#34;политики-ветвления&#34;&gt;Политики ветвления&lt;/h3&gt;
&lt;p&gt;Teams можно настроить GitHub и Azure DevOps для принудительного применения согласованных рабочих процессов и процессов в группе. Они могут настроить политики ветвей , чтобы убедиться, что запросы на вытягивание соответствуют требованиям до завершения. Политики ветвления защищают важные ветви, предотвращая прямые push-уведомления, требуют рецензентов и гарантируя чистоту сборок.&lt;/p&gt;
&lt;h2 id=&#34;заключение&#34;&gt;Заключение&lt;/h2&gt;
&lt;p&gt;Теперь вы разобрались в основах управления версиями, получили представление о Git и узнали, почему командам разработки ПО стоит пользоваться этой системой.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Markdown</title>
      <link>https://example.com/ru/post/markdown/</link>
      <pubDate>Fri, 06 May 2022 18:20:08 +0300</pubDate>
      <guid>https://example.com/ru/post/markdown/</guid>
      <description>&lt;h2 id=&#34;что-такое-markdown&#34;&gt;Что такое Markdown&lt;/h2&gt;
&lt;p&gt;Markdown — это язык текстовой разметки документов. Его придумали в 2004 году блогер Джон Грубер и интернет-активист Аарон Шварц, чтобы быстро форматировать статьи. Требования к языку у них были такие:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Чем проще — тем лучше.&lt;/li&gt;
&lt;li&gt;Документы с этой разметкой можно перевести в красиво отформатированный вид, как на веб-странице.&lt;/li&gt;
&lt;li&gt;Исходный текст материала должен оставаться читаемым даже без преобразования в веб-страницу.&lt;/li&gt;
&lt;li&gt;В результате у них получился простой язык, который активно используется до сих пор.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Смысл маркдауна в том, что вы делаете разметку своего документа минимальными усилиями, а уже какой-то другой плагин или программа превращает вашу разметку в итоговый документ — например в HTML. Но можно и не в HTML, а в PDF или что-нибудь ещё. Маркдаун — это как бы язык для других программ, чтобы они формировали документы на основе вашего текста.&lt;/p&gt;
&lt;p&gt;Единственное, что вам может понадобиться, — настроить в этом плагине шрифты, отступы и цвета, чтобы результат выглядел красиво. Один раз настраиваете, а потом быстро пишете много материалов, которые на выходе превратятся в готовые статьи с хорошей разметкой.&lt;/p&gt;
&lt;h2 id=&#34;как-работает-эта-магия&#34;&gt;Как работает эта магия&lt;/h2&gt;
&lt;p&gt;Если мы просто напишем текст и разметим его с помощью Markdown, то он так и останется текстом с разными спецсимволами. Чтобы результат выглядел как на скриншоте выше, используют специальные редакторы, плагины или программы, которые поддерживают этот язык разметки.&lt;/p&gt;
&lt;p&gt;Работает это так:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Программа берёт текст и смотрит, есть ли в нём эта разметка.&lt;/li&gt;
&lt;li&gt;Если есть — применяет нужное правило оформления к нужному фрагменту текста и выводит его красиво. Если нужно — подставит картинку, сделает ссылку и сама оформит список.&lt;/li&gt;
&lt;li&gt;Если разметки нет — выводит содержимое просто как текст.&lt;/li&gt;
&lt;li&gt;Такое работает не в каждом редакторе — если в Word выделить текст звёздочками, то это так и останется текстом со звёздочками, без курсива или жирного оформления. Но почти все редакторы понимают, когда в них вставляют текст, размеченный маркдауном. Они тогда сразу выделяют нужные фрагменты, делают заголовки и вставляют картинки.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;зачем-использовать-markdown&#34;&gt;Зачем использовать Markdown&lt;/h2&gt;
&lt;p&gt;Причин несколько.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Если вам нужно простое оформление текста без изысков или вам нужно быстро подготовить материал к публикации без сложной вёрстки.&lt;/li&gt;
&lt;li&gt;Если вы делаете блог или другой статичный сайт, на котором хотите размещать свои тексты с лаконичным дизайном.&lt;/li&gt;
&lt;li&gt;Вы хотите писать красивые сообщения в WhatsApp или Telegram.&lt;/li&gt;
&lt;li&gt;Вы программист и пишете документацию к своему проекту на GitHub&lt;/li&gt;
&lt;li&gt;Ваш собственный телеграм-секретарь: делаем вместе&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Но во всех этих случаях вам нужно одно — сделать минимальную вёрстку текста так, чтобы он выглядел опрятно и чтобы его можно было прочитать и без специальных программ.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Научные языки программирования</title>
      <link>https://example.com/ru/post/scientificprogramminglanguages/</link>
      <pubDate>Fri, 06 May 2022 18:20:08 +0300</pubDate>
      <guid>https://example.com/ru/post/scientificprogramminglanguages/</guid>
      <description>&lt;h2 id=&#34;программирование-в-науке-актуальность-и-востребованность&#34;&gt;Программирование в науке: актуальность и востребованность.&lt;/h2&gt;
&lt;p&gt;Программирование часто упоминают в прикладном контексте. Кажется, с его помощью создают только мобильные приложения, интернет-системы и спецэффекты для кино. Но первоначально программирование предназначалось для решения научных задач. Кроме того, программирование само — наука, узнать о которой будет полезно тем, кто решил связать карьеру с компьютерной разработкой.&lt;/p&gt;
&lt;h2 id=&#34;общая-информация&#34;&gt;Общая информация&lt;/h2&gt;
&lt;p&gt;Научное программирование — высокоориентированный стиль программирования для научных расчетов. От других видов программирования его отличают предельные корректность и стабильность конечного продукта, строгое разделение научной и интерфейсной частей, индивидуальность алгоритмов, а также преобладание эффективности над универсальностью. Научное программирование лежит в основе любого современного глобального исследования. Все передовые технологии — от квантовых компьютеров до космических программ — были бы невозможны без специалистов в области научного программирования, способных предоставить ученым надежный и точный инструмент для совершения открытий. Ряд отраслей науки непосредственно зависят от уровня развития научного программирования. Так, своего исполнения ждут беспилотный транспорт, «умные» системы управления городским и сельским хозяйством, фондовыми биржами; ждут робототехника, генная инженерия, искусственный интеллект, превосходящий возможности человека.&lt;/p&gt;
&lt;h2 id=&#34;специализации&#34;&gt;Специализации&lt;/h2&gt;
&lt;p&gt;Ученые используют различные языки программирования, выбор которых зависит от типа задачи и предпочтений автора. Исторически первым высокоуровневым языком программирования является Fortran, на нем написано много отлаженных библиотек математической статистики и библиотек для решения дифференциальных уравнений, что актуально для экономики и биологии соответственно. Более простым синтаксисом обладает Python, также подходящий для программирования математических вычислений. Язык Python привлекается для обработки данных в математике, физике, экономике, биологии, химии и умеет работать с некоторыми другими «научными» языками: Fortran, C++, C#. В свою очередь C# позволяет программировать на платформе .NET, адаптировать программу к общеязыковой исполняющей среде (CLR) и ускорить разработку в рамках оперативных научных сессий.&lt;/p&gt;
&lt;h2 id=&#34;будущее-профессии-программист-ученый&#34;&gt;Будущее профессии программист-ученый&lt;/h2&gt;
&lt;p&gt;Программирование двигает науку, которая двигает технический прогресс. Изобретения, которые считались революционными вчера, в XXI веке служат бытовым потребностям: СВЧ-печь, мобильный телефон, 8-битная домашняя ЭВМ. От программиста-ученого зависит, каких вершин достигнет наука сегодня и какие из них завтра войдут в каждый дом. В руках программиста-ученого находятся инструменты не только для развития промышленности, но и для повышения общего качества жизни. Такой специалист увеличивает прогностическую функцию человечества, помогая предугадывать и предотвращать климатические, финансовые, гуманитарные катастрофы.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Отчеты</title>
      <link>https://example.com/ru/post/report/</link>
      <pubDate>Fri, 06 May 2022 18:20:08 +0300</pubDate>
      <guid>https://example.com/ru/post/report/</guid>
      <description>&lt;p&gt;Содержание основных элементов отчета:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Титульный лист. Первый лист работы оформляется строго по образцу, который обычно приводится в методических пособиях по вашему предмету. В нем не просто требуется указать такие элементы, как название образовательного учреждения, вид работы и сведения об исполнителе, но и расположить их в строгом соответствии со стандартами.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Реферат. Реферат фактически является кратким представлением всего вашего отчета и содержит ряд статистических сведений. В нем нужно указать количество частей, страниц работы, иллюстраций, приложений, таблиц, использованных литературных источников и приложений. Здесь же приводится перечень ключевых слов работы и собственно текст реферата. Последний подразумевает основные элементы работы от поставленных целей до результатов и рекомендаций по их внедрению. В практике вузов в отчеты по лабораторным работам реферат обычно не включают.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Введение. Во введении типовой лабораторной работы обычно прописывают цели проводимого исследования и задачи, выполнение которых поможет достичь поставленных целей. В то же время существуют работы, в которых студенты становятся настоящими первооткрывателями. Приходилось ли вам хотя бы однажды испытывать чувство крайнего любопытства и нетерпения при проведении лабораторной работы? Ощущать, что буквально через пару минут вы найдете ответ на вопрос, на который еще никто и никогда не находил ответа? Именно для таких исследований пишется развернутое введение с доказательством актуальности и новизны изучаемой темы. Чтобы действительно провести исследование в той области, в которой, как говорится, еще не ступала нога человека, во введении вам понадобится привести оценку современного состояния рассматриваемой проблемы и обосновать необходимость ее решения.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Основная часть. Так как в разных вузах и в разных дисциплинах существуют свои тонкости проведения лабораторных работ, содержание основной части подробно описывают в соответствующих методичках. Важно, чтобы в этом разделе работы была отражена ее суть, описана методика и результаты проделанной работы. В основной части прописывают следующие элементы:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;цели проводимого исследования;&lt;/li&gt;
&lt;li&gt;задачи, выполнение которых поможет достичь поставленных целей;&lt;/li&gt;
&lt;li&gt;ход работы, в котором описываются выполненные действия;&lt;/li&gt;
&lt;li&gt;прочие разделы, предусмотренные методическими материалами по изучаемой дисциплине.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Заключение. В этой части работы вам потребуется сделать выводы по полученным в ходе лабораторной работы результатам. Для этого оцените, насколько полно выполнены поставленные задачи. В сложных работах могут присутствовать и другие элементы, например, рекомендации для дальнейшего применения результатов проведённой работы.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Вторая  неделя</title>
      <link>https://example.com/ru/post/secondweek/</link>
      <pubDate>Fri, 06 May 2022 17:46:50 +0300</pubDate>
      <guid>https://example.com/ru/post/secondweek/</guid>
      <description>&lt;h2 id=&#34;введение&#34;&gt;Введение&lt;/h2&gt;
&lt;p&gt;За прошедшую неделю я выполнил лабораторные работы №5 и №6, темы которых были &amp;ldquo;Анализ файловой системы Linux&amp;rdquo; и &amp;ldquo;Поиск файлов. Перенаправление ввода-вывода. Просмотр запущенных процессов&amp;rdquo;.&lt;/p&gt;
&lt;h2 id=&#34;лабораторная-работа-5&#34;&gt;Лабораторная работа №5&lt;/h2&gt;
&lt;p&gt;Целью данной лабораторной было ознакомление с файловой системой Linux, её структурой, именами и содержанием каталогов. Приобретение практических навыков по применению команд для работы с файлами и каталогами, по управлению процессами (и работами), по проверке использования диска и обслуживанию файловой системы.&lt;/p&gt;
&lt;p&gt;Задачи, которые я выполнил:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Выполнить все примеры, приведенные в теории.&lt;/li&gt;
&lt;li&gt;Различные манипуляции с файлами и каталогами(копирование, вырезание, переименование и т.д.).&lt;/li&gt;
&lt;li&gt;Кратко охарактеризовать mount, fsck, mkfs,&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;лабораторная-работа-6&#34;&gt;Лабораторная работа №6&lt;/h2&gt;
&lt;p&gt;Целью данной лабораторной было ознакомление с инструментами поиска файлов и фильтрации текстовых данных. Приобретение практических навыков: по управлению процессами (и заданиями), по проверке использования диска и обслуживанию файловых систем.&lt;/p&gt;
&lt;p&gt;Задачи, которые я выполнил:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Изучение команд find и grep и их применение на практике.&lt;/li&gt;
&lt;li&gt;Запуск программ в фоновом режиме.&lt;/li&gt;
&lt;li&gt;Изучение команды kill и применение ее для завершения процесса.&lt;/li&gt;
&lt;li&gt;Использование перенаправление вывода-ввода.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;заключение&#34;&gt;Заключение&lt;/h2&gt;
&lt;p&gt;В итоге, я ближе познакомился с файловой системой Linux, её структурой, именами и содержанием каталогов, а также приобрел практические навыки: по управлению процессами (и заданиями), по проверке использования диска и обслуживанию файловых систем.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Первая неделя</title>
      <link>https://example.com/ru/post/firstweek/</link>
      <pubDate>Fri, 06 May 2022 17:46:50 +0300</pubDate>
      <guid>https://example.com/ru/post/firstweek/</guid>
      <description>&lt;h2 id=&#34;введение&#34;&gt;Введение&lt;/h2&gt;
&lt;p&gt;Прошлая неделя немного отличалась от остальных: я участвовал в спартакиаде по волейболу. К сожаленю, мы проиграли, но все равно это было весело. Если же говорить об операционных системах, то я выполнил лабораторные работы №3 и №4, темы которых были &amp;ldquo;Markdown&amp;rdquo; и &amp;ldquo;Основы интерфейса взаимодействия пользователя с системой Unix на уровне командной строки&amp;rdquo;.&lt;/p&gt;
&lt;h2 id=&#34;лабораторная-работа-3&#34;&gt;Лабораторная работа №3&lt;/h2&gt;
&lt;p&gt;Целью данной лабораторной было научиться оформлять отчёты с помощью легковесного языка разметки Markdown. Необходимо было переделать отчеты по 2-ой лабораторной работе в формате Markdown. Для удобства я пользовался Visual studio code. Эта программа позволяет предварительно просматривать файла пусть и снебольшими ошибками. Это немного упрощает процесс создания отчетов и презентаций.
В ходе работы я ознакомился с базовыми сведениями о Markdown, а далее я переделал отчет по 2-ой лабораторной работе.&lt;/p&gt;
&lt;h2 id=&#34;лабораторная-работа-4&#34;&gt;Лабораторная работа №4&lt;/h2&gt;
&lt;p&gt;Целью данной лабораторной было приобретение практических навыков взаимодействия пользователя с системой посредством командной строки. В ходе работы я вспомнил команды, которые изучал на Архитектуре вычислительных систем, поностольгировал по беззаботным временам в 1-ом модуле. задачи, которые я выполнил:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Определите полное имя вашего домашнего каталога. Далее относительно этого каталога будут выполняться последующие упражнения.&lt;/li&gt;
&lt;li&gt;Выполните следующие действия:
&lt;ol&gt;
&lt;li&gt;Перейдите в каталог /tmp.&lt;/li&gt;
&lt;li&gt;Выведите на экран содержимое каталога /tmp. Для этого используйте команду ls
различными опциями. Поясните разницу в выводимой на экран информации.&lt;/li&gt;
&lt;li&gt;Определите, есть ли в каталоге /var/spool подкаталог с именем cron?&lt;/li&gt;
&lt;li&gt;Перейдите в Ваш домашний каталог и выведите на экран его содержимое. Определите,кто является владельцем файлов и подкаталогов?&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Выполните следующие действия:
&lt;ol&gt;
&lt;li&gt;В домашнем каталоге создайте новый каталог с именем newdir.&lt;/li&gt;
&lt;li&gt;В каталоге ~/newdir создайте новый каталог с именем morefun.&lt;/li&gt;
&lt;li&gt;В домашнем каталоге создайте одной командой три новых каталога с именами
letters, memos, misk. Затем удалите эти каталоги одной командой.&lt;/li&gt;
&lt;li&gt;Попробуйте удалить ранее созданный каталог ~/newdir командой rm. Проверьте,
был ли каталог удалён.&lt;/li&gt;
&lt;li&gt;Удалите каталог ~/newdir/morefun из домашнего каталога. Проверьте, был ли
каталог удалён.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;С помощью команды man определите, какую опцию команды ls нужно использовать для просмотра содержимое не только указанного каталога, но и подкаталогов,входящих в него.&lt;/li&gt;
&lt;li&gt;С помощью команды man определите набор опций команды ls, позволяющий отсортировать по времени последнего изменения выводимый список содержимого каталога
с развёрнутым описанием файлов.&lt;/li&gt;
&lt;li&gt;Используйте команду man для просмотра описания следующих команд: cd, pwd, mkdir,
rmdir, rm. Поясните основные опции этих команд.&lt;/li&gt;
&lt;li&gt;Используя информацию, полученную при помощи команды history, выполните модификацию и исполнение нескольких команд из буфера команд.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;заключение&#34;&gt;Заключение&lt;/h2&gt;
&lt;p&gt;В итоге, я научился оформлять отчеты и презентации в формате Markdown, а также взаимодействовать с системой посредством командной строки&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Пятая неделя</title>
      <link>https://example.com/ru/post/fifthweek/</link>
      <pubDate>Fri, 06 May 2022 17:46:50 +0300</pubDate>
      <guid>https://example.com/ru/post/fifthweek/</guid>
      <description>&lt;h2 id=&#34;введение&#34;&gt;Введение&lt;/h2&gt;
&lt;p&gt;За прошедшую неделю я выполнил лабораторные работы №11 и №12, темы которых были &amp;ldquo;Программирование в командном процессоре ОС UNIX. Ветвления и циклы&amp;rdquo; и &amp;ldquo;Программирование в командном процессоре ОС UNIX. Расширенное программирование&amp;rdquo;.&lt;/p&gt;
&lt;h2 id=&#34;лабораторная-работа-12&#34;&gt;Лабораторная работа №12&lt;/h2&gt;
&lt;p&gt;Целью данной лабораторной было изучить основы программирования в оболочке ОС UNIX, научиться писать более сложные командные файлы с использованием логических управляющих конструкций и циклов.&lt;/p&gt;
&lt;p&gt;Задачи, которые я выполнил:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Написать командный файл, реализующий упрощённый механизм семафоров. Командный файл должен в течение некоторого времени t1 дожидаться освобождения
ресурса, выдавая об этом сообщение, а дождавшись его освобождения, использовать
его в течение некоторого времени t2&amp;lt;&amp;gt;t1, также выдавая информацию о том, что
ресурс используется соответствующим командным файлом (процессом). Запустить
командный файл в одном виртуальном терминале в фоновом режиме, перенаправив
его вывод в другой (&amp;gt; /dev/tty#, где # — номер терминала куда перенаправляется
вывод), в котором также запущен этот файл, но не фоновом, а в привилегированном
режиме. Доработать программу так, чтобы имелась возможность взаимодействия трёх
и более процессов.&lt;/li&gt;
&lt;li&gt;Реализовать команду man с помощью командного файла. Изучите содержимое каталога /usr/share/man/man1. В нем находятся архивы текстовых файлов, содержащих
справку по большинству установленных в системе программ и команд. Каждый архив
можно открыть командой less сразу же просмотрев содержимое справки. Командный
файл должен получать в виде аргумента командной строки название команды и в виде
результата выдавать справку об этой команде или сообщение об отсутствии справки,
если соответствующего файла нет в каталоге man1.&lt;/li&gt;
&lt;li&gt;Используя встроенную переменную $RANDOM, напишите командный файл, генерирующий случайную последовательность букв латинского алфави&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;лабораторная-работа-11&#34;&gt;Лабораторная работа №11&lt;/h2&gt;
&lt;p&gt;Целью данной лабораторной было изучить основы программирования в оболочке ОС UNIX,  научится писать более сложные командные файлы с использованием логических управляющих конструкций и циклов.&lt;/p&gt;
&lt;p&gt;Задачи, которые я выполнил:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Используя команды getopts grep, написать командный файл, который анализирует командную строку с ключами:
– -iinputfile — прочитать данные из указанного файла;
– -ooutputfile — вывести данные в указанный файл;
– -pшаблон — указать шаблон для поиска;
– -C — различать большие и малые буквы;
– -n — выдавать номера строк.
а затем ищет в указанном файле нужные строки, определяемые ключом -p.&lt;/li&gt;
&lt;li&gt;Написать на языке Си программу, которая вводит число и определяет, является ли оно больше нуля, меньше нуля или равно нулю. Затем программа завершается с помощью функции exit(n), передавая информацию в о коде завершения в оболочку. Командный файл должен вызывать эту программу и, проанализировав с помощью команды $?, выдать сообщение о том, какое число было введено.&lt;/li&gt;
&lt;li&gt;Написать командный файл, создающий указанное число файлов, пронумерованных последовательно от 1 до 𝑁 (например 1.tmp, 2.tmp, 3.tmp,4.tmp и т.д.). Число файлов, которые необходимо создать, передаётся в аргументы командной строки. Этот же командный файл должен уметь удалять все созданные им файлы (если они существуют).&lt;/li&gt;
&lt;li&gt;Написать командный файл, который с помощью команды tar запаковывает в архив все файлы в указанной директории. Модифицировать его так, чтобы запаковывались только те файлы, которые были изменены менее недели тому назад (использовать команду find).&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;заключение&#34;&gt;Заключение&lt;/h2&gt;
&lt;p&gt;В итоге, я научился писать более сложные командные файлы.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Третья неделя</title>
      <link>https://example.com/ru/post/thirdweek/</link>
      <pubDate>Fri, 06 May 2022 17:46:50 +0300</pubDate>
      <guid>https://example.com/ru/post/thirdweek/</guid>
      <description>&lt;h2 id=&#34;введение&#34;&gt;Введение&lt;/h2&gt;
&lt;p&gt;За прошедшую неделю я выполнил лабораторные работы №7 и №8, темы которых были &amp;ldquo;Командная оболочка Midnight Commander&amp;rdquo; и &amp;ldquo;Текстовой редактор vi&amp;rdquo;.&lt;/p&gt;
&lt;h2 id=&#34;лабораторная-работа-7&#34;&gt;Лабораторная работа №7&lt;/h2&gt;
&lt;p&gt;Целью данной лабораторной было освоение основных возможностей командной оболочки Midnight Commander. Приобретение навыков практической работы по просмотру каталогов и файлов; манипуляций
с ними.&lt;/p&gt;
&lt;p&gt;Задачи, которые я выполнил:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Изучил и поигрался с меню MC.&lt;/li&gt;
&lt;li&gt;Выполнил различные действия с файлами в встроенном редакторе MC.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;лабораторная-работа-6&#34;&gt;Лабораторная работа №6&lt;/h2&gt;
&lt;p&gt;Целью данной лабораторной было ознакомление с инструментами поиска файлов и фильтрации текстовых данных. Приобретение практических навыков: по управлению процессами (и заданиями), по проверке использования диска и обслуживанию файловых систем.&lt;/p&gt;
&lt;p&gt;Задачи, которые я выполнил:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Изучил основные возможности редактора vi.&lt;/li&gt;
&lt;li&gt;Выполнил различные действия с текстом в редакторе.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;заключение&#34;&gt;Заключение&lt;/h2&gt;
&lt;p&gt;В итоге, я ближе познакомился с Midnight Commander, встроенном в него редактором, а также редактором vi.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Четвертая неделя</title>
      <link>https://example.com/ru/post/fourthweek/</link>
      <pubDate>Fri, 06 May 2022 17:46:50 +0300</pubDate>
      <guid>https://example.com/ru/post/fourthweek/</guid>
      <description>&lt;h2 id=&#34;введение&#34;&gt;Введение&lt;/h2&gt;
&lt;p&gt;За прошедшую неделю я выполнил лабораторные работы №9 и №10, темы которых были &amp;ldquo;Текстовой редактор emacs&amp;rdquo; и &amp;ldquo;Программирование в командном процессоре ОС UNIX. Командные файлы&amp;rdquo;.&lt;/p&gt;
&lt;h2 id=&#34;лабораторная-работа-9&#34;&gt;Лабораторная работа №9&lt;/h2&gt;
&lt;p&gt;Целью данной лабораторной было познакомиться с операционной системой Linux. Получить практические навыки работы с редактором Emacs.&lt;/p&gt;
&lt;p&gt;Задачи, которые я выполнил:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Создал файл, вызвав emacs.&lt;/li&gt;
&lt;li&gt;Выполнил различные манипуляции с текстом в файле(копирование, вырезание, перемещение строки и т.д.).&lt;/li&gt;
&lt;li&gt;Поигрался с функционалом редактора.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;лабораторная-работа-10&#34;&gt;Лабораторная работа №10&lt;/h2&gt;
&lt;p&gt;Целью данной лабораторной было изучить основы программирования в оболочке ОС UNIX/Linux. Научиться писать небольшие командные файлы.&lt;/p&gt;
&lt;p&gt;Задачи, которые я выполнил:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Написать скрипт, который при запуске будет делать резервную копию самого себя (то есть файла, в котором содержится его исходный код) в другую директорию backup в вашем домашнем каталоге. При этом файл должен архивироваться одним из архиваторов на выбор zip, bzip2 или tar. Способ использования команд архивации необходимо узнать, изучив справку.&lt;/li&gt;
&lt;li&gt;Написать пример командного файла, обрабатывающего любое произвольное число аргументов командной строки, в том числе превышающее десять. Например, скрипт может последовательно распечатывать значения всех переданных аргументов.&lt;/li&gt;
&lt;li&gt;Написать командный файл — аналог команды ls (без использования самой этой команды и команды dir). Требуется, чтобы он выдавал информацию о нужном каталоге и выводил информацию о возможностях доступа к файлам этого каталога.&lt;/li&gt;
&lt;li&gt;Написать командный файл, который получает в качестве аргумента командной строки формат файла (.txt, .doc, .jpg, .pdf и т.д.) и вычисляет количество таких файлов в указанной директории. Путь к директории также передаётся в виде аргумента командной строки.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;заключение&#34;&gt;Заключение&lt;/h2&gt;
&lt;p&gt;В итоге, я познакомился с текстовым редактором emacs, а также научился писать простые командные файлы.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
